commit 29935ee78defb131f2a0144c2cfbbb8a3fcb6f38
Author: Julian Lehrhuber <jl@lerry.de>
Date:   Mon Feb 10 09:32:58 2020 +0100

    Auto-accept new devices and share all folders
    
    This helps in a headless scenario, where e.g. a NAS should accept
    clients on its own

diff --git a/lib/model/model.go b/lib/model/model.go
index d2ea083d0..a35a63919 100644
--- a/lib/model/model.go
+++ b/lib/model/model.go
@@ -2284,23 +2284,23 @@ func (m *model) setIgnores(cfg config.FolderConfiguration, content []string) err
 // and add it to a list of known devices ahead of any checks.
 func (m *model) OnHello(remoteID protocol.DeviceID, addr net.Addr, hello protocol.Hello) error {
 	if _, ok := m.cfg.Device(remoteID); !ok {
-		if err := m.db.AddOrUpdatePendingDevice(remoteID, hello.DeviceName, addr.String()); err != nil {
-			l.Warnf("Failed to persist pending device entry to database: %v", err)
-		}
-		m.evLogger.Log(events.PendingDevicesChanged, map[string][]interface{}{
-			"added": {map[string]string{
-				"deviceID": remoteID.String(),
-				"name":     hello.DeviceName,
-				"address":  addr.String(),
-			}},
-		})
-		// DEPRECATED: Only for backwards compatibility, should be removed.
-		m.evLogger.Log(events.DeviceRejected, map[string]string{
-			"name":    hello.DeviceName,
-			"device":  remoteID.String(),
-			"address": addr.String(),
+		m.cfg.Modify(func(conf *config.Configuration) {
+			// Automatically accept device request
+			conf.SetDevice(config.DeviceConfiguration{
+				DeviceID: remoteID,
+				Name:     hello.DeviceName,
+			})
+			// Share all folders with new device
+			for i := range conf.Folders {
+				conf.Folders[i].Devices = append(conf.Folders[i].Devices, config.FolderDeviceConfiguration{
+					DeviceID: remoteID,
+				})
+			}
 		})
-		return errDeviceUnknown
+		if err := m.cfg.Save(); err != nil {
+			l.Warnln("Saving config:", err)
+		}
+		return nil
 	}
 	return nil
 }
